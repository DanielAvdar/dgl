name: Tests

on: [ push,pull_request ]
env:
  DGL_HOME: ${{ github.workspace }}
  DGL_LIBRARY_PATH: ${{ github.workspace }}/build
jobs:
  tests:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ '3.9', '3.10', '3.11' ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Create Virtual Environment
        run: |
          python -m venv ./python/venv
          


      - name: Install OS Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          source ./python/venv/bin/activate
          mkdir build
          cd build
          cmake -DUSE_OPENMP=off -DUSE_LIBXSMM=OFF ..
          make -j4
          cd ../python
          python setup.py install
          python setup.py build_ext --inplace

      - name: Install OS Dependencies
        if: matrix.os == 'macos-latest'
        run: |
          source ./python/venv/bin/activate
          mkdir build
          cd build
          cmake -DUSE_OPENMP=off -DUSE_LIBXSMM=OFF ..
          make -j4
          cd ../python
          python setup.py install
          python setup.py build_ext --inplace

      - name: Install OS Dependencies
        if: matrix.os == 'windows-latest'
        run: |
          ./python/venv/bin/activate.bat
          choco install msbuild cmake
          mkdir build
          cd build
          cmake -DUSE_OPENMP=off -DUSE_LIBXSMM=OFF ..
          msbuild dgl.sln /m
          cd ../python
          python setup.py install
          python setup.py build_ext --inplace

      - name: Test with pytest
        run: |
          pytest
    continue-on-error: true
